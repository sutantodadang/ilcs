// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package repositories

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type TodoStatus string

const (
	TodoStatusPending   TodoStatus = "pending"
	TodoStatusCompleted TodoStatus = "completed"
)

func (e *TodoStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TodoStatus(s)
	case string:
		*e = TodoStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for TodoStatus: %T", src)
	}
	return nil
}

type NullTodoStatus struct {
	TodoStatus TodoStatus `json:"todo_status"`
	Valid      bool       `json:"valid"` // Valid is true if TodoStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTodoStatus) Scan(value interface{}) error {
	if value == nil {
		ns.TodoStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TodoStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTodoStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TodoStatus), nil
}

func (e TodoStatus) Valid() bool {
	switch e {
	case TodoStatusPending,
		TodoStatusCompleted:
		return true
	}
	return false
}

func AllTodoStatusValues() []TodoStatus {
	return []TodoStatus{
		TodoStatusPending,
		TodoStatusCompleted,
	}
}

type Todo struct {
	ID          pgtype.UUID        `db:"id" json:"id"`
	Title       string             `db:"title" json:"title"`
	Description pgtype.Text        `db:"description" json:"description"`
	Status      TodoStatus         `db:"status" json:"status"`
	DueDate     pgtype.Date        `db:"due_date" json:"due_date"`
	CreatedAt   pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}
