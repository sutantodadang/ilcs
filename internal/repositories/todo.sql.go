// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: todo.sql

package repositories

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countTodo = `-- name: CountTodo :one
SELECT COUNT(*) 
FROM todo
WHERE 
    ($1::text IS NULL OR status = $1::todo_status) AND
    ($2::text IS NULL OR 
        (title ILIKE '%' || $2 || '%' OR 
         description ILIKE '%' || $2 || '%'))
`

type CountTodoParams struct {
	Status *string `db:"status" json:"status"`
	Search *string `db:"search" json:"search"`
}

func (q *Queries) CountTodo(ctx context.Context, arg CountTodoParams) (int64, error) {
	row := q.db.QueryRow(ctx, countTodo, arg.Status, arg.Search)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todo WHERE id = $1
`

func (q *Queries) DeleteTodo(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteTodo, id)
	return err
}

const getTodoById = `-- name: GetTodoById :one
SELECT 
    id,
    title,
    description,
    status,
    due_date
FROM todo
WHERE id = $1
`

type GetTodoByIdRow struct {
	ID          pgtype.UUID `db:"id" json:"id"`
	Title       string      `db:"title" json:"title"`
	Description pgtype.Text `db:"description" json:"description"`
	Status      TodoStatus  `db:"status" json:"status"`
	DueDate     pgtype.Date `db:"due_date" json:"due_date"`
}

func (q *Queries) GetTodoById(ctx context.Context, id pgtype.UUID) (GetTodoByIdRow, error) {
	row := q.db.QueryRow(ctx, getTodoById, id)
	var i GetTodoByIdRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.DueDate,
	)
	return i, err
}

const insertTodo = `-- name: InsertTodo :one
INSERT INTO todo (id, title, description, due_date) VALUES ($1, $2, $3, $4) RETURNING id, title, description, status, due_date, created_at, updated_at
`

type InsertTodoParams struct {
	ID          pgtype.UUID `db:"id" json:"id"`
	Title       string      `db:"title" json:"title"`
	Description pgtype.Text `db:"description" json:"description"`
	DueDate     pgtype.Date `db:"due_date" json:"due_date"`
}

func (q *Queries) InsertTodo(ctx context.Context, arg InsertTodoParams) (Todo, error) {
	row := q.db.QueryRow(ctx, insertTodo,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.DueDate,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.DueDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTodo = `-- name: ListTodo :many
WITH filtered_todo AS (
    SELECT id, title, description, status, due_date, created_at, updated_at
    FROM todo
    WHERE 
        ($3::text IS NULL OR status = $3::todo_status) AND
        ($4::text IS NULL OR 
            (title ILIKE '%' || $4 || '%' OR 
             description ILIKE '%' || $4 || '%'))
)
SELECT 
    id,
    title,
    description,
    status,
    due_date
FROM filtered_todo
ORDER BY created_at DESC
LIMIT $2::integer
OFFSET ($1::integer - 1) * $2::integer
`

type ListTodoParams struct {
	Page     int32  `db:"page" json:"page"`
	LimitVal int32  `db:"limit_val" json:"limit_val"`
	Status   *string `db:"status" json:"status"`
	Search   *string `db:"search" json:"search"`
}

type ListTodoRow struct {
	ID          pgtype.UUID `db:"id" json:"id"`
	Title       string      `db:"title" json:"title"`
	Description pgtype.Text `db:"description" json:"description"`
	Status      TodoStatus  `db:"status" json:"status"`
	DueDate     pgtype.Date `db:"due_date" json:"due_date"`
}

func (q *Queries) ListTodo(ctx context.Context, arg ListTodoParams) ([]ListTodoRow, error) {
	rows, err := q.db.Query(ctx, listTodo,
		arg.Page,
		arg.LimitVal,
		arg.Status,
		arg.Search,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTodoRow
	for rows.Next() {
		var i ListTodoRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.DueDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodo = `-- name: UpdateTodo :one
UPDATE todo 
SET 
    title = $2,
    description = $3,
    status = $4,
    due_date = $5,
    updated_at = NOW()
WHERE id = $1 
RETURNING id, title, description, status, due_date, created_at, updated_at
`

type UpdateTodoParams struct {
	ID          pgtype.UUID `db:"id" json:"id"`
	Title       string      `db:"title" json:"title"`
	Description pgtype.Text `db:"description" json:"description"`
	Status      TodoStatus  `db:"status" json:"status"`
	DueDate     pgtype.Date `db:"due_date" json:"due_date"`
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) (Todo, error) {
	row := q.db.QueryRow(ctx, updateTodo,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Status,
		arg.DueDate,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.DueDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
